{"version":3,"sources":["components/Screen.module.css","components/Buttons.module.css","components/Screen.tsx","components/Buttons.tsx","components/SetScreen.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Screen","props","className","obj","screen","screenMessage","style","color","main_screen_value","value","maxValue","Buttons","disabled","flag","onClick","class","children","SetScreen","extra_container","flex_container","onChange","e","parseInt","currentTarget","minValue","setMaxValue","setScreenMessage","setIncBtnFlag","setSetBtnFlag","setClearBtn","setResBtnFlag","max_input","backgroundColor","border","type","setMinValue","min_input","App","localStorageMinValue","localStorage","getItem","localStorageMaxValue","useState","setValue","incBtnFlag","resBtnFlag","setBtnFlag","clearBtn","clear","setItem","toString","set","inc","reset","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ecaa685e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"screen\":\"Screen_screen__3QktY\",\"extra_container\":\"Screen_extra_container__2y4ko\",\"min_input\":\"Screen_min_input__1OBlr\",\"max_input\":\"Screen_max_input__3NiCN\",\"flex_container\":\"Screen_flex_container__BEHd6\",\"main_screen_value\":\"Screen_main_screen_value__QkT23\",\"screenMessage\":\"Screen_screenMessage__7cxAt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inc\":\"Buttons_inc__21XJN\",\"reset\":\"Buttons_reset__1UBWp\",\"set\":\"Buttons_set__2m7KF\",\"clear\":\"Buttons_clear__3SPO3\"};","import React from 'react';\r\nimport obj from './Screen.module.css';\r\n\r\n\r\ntype ScreenPropsType = {\r\n    value: number\r\n    screenMessage: string\r\n    maxValue:number\r\n}\r\n\r\nfunction Screen(props: ScreenPropsType) {\r\n\r\n    return (\r\n        <div className={obj.screen}>\r\n            {\r\n                props.screenMessage !== ''\r\n                ?\r\n                <span className={obj.screenMessage} style={props.screenMessage === 'Incorrect value!' ? {color: \"red\"} : {}}>{props.screenMessage}</span>\r\n                :\r\n                <span className={obj.main_screen_value} style={props.value === props.maxValue ? {color: \"red\"} : {}}>\r\n                {props.value}\r\n            </span>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Screen;","import React from 'react';\r\nimport obj from './Buttons.module.css';\r\n\r\n\r\ntype ButtonsPropsType = {\r\n    children: string\r\n    onClick: () => void\r\n    flag: boolean\r\n    class:string\r\n}\r\n\r\nfunction Buttons(props: ButtonsPropsType) {\r\n    return (\r\n        <>\r\n            <button disabled={props.flag}\r\n                    onClick={() => props.onClick && props.onClick()}\r\n                    className={props.class}>\r\n                {props.children}\r\n            </button>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Buttons;","import React, {ChangeEvent, useState} from 'react';\r\nimport obj from './Screen.module.css';\r\n\r\n\r\ntype SetScreenType = {\r\n    screenMessage: string\r\n    setScreenMessage: (screenMessage: string) => void\r\n    setIncBtnFlag: (flag: boolean) => void\r\n    setSetBtnFlag: (flag: boolean) => void\r\n    minValue: number\r\n    setMinValue: (value: number) => void\r\n    maxValue: number\r\n    setMaxValue: (maxValue: number) => void\r\n    setClearBtn: (flag: boolean) => void\r\n    setResBtnFlag:(flag: boolean)=>void\r\n}\r\n\r\nfunction SetScreen(props: SetScreenType) {\r\n\r\n\r\n    const onChangeStartInputHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if ((parseInt(e.currentTarget.value) >= 0) && (parseInt(e.currentTarget.value) < props.maxValue)) {\r\n            props.setMinValue(parseInt(e.currentTarget.value));\r\n            props.setScreenMessage('enter values and press \\'set\\' ');\r\n            props.setIncBtnFlag(true);\r\n            props.setSetBtnFlag(false);\r\n            props.setClearBtn(false);\r\n\r\n\r\n        } else {\r\n            props.setMinValue(parseInt(e.currentTarget.value));\r\n            props.setScreenMessage('Incorrect value!');\r\n            props.setIncBtnFlag(true);\r\n            props.setSetBtnFlag(true);\r\n            props.setResBtnFlag(true);\r\n        }\r\n    }\r\n\r\n    const onChangeMaxInputHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if ((parseInt(e.currentTarget.value) > props.minValue) && (props.minValue >= 0)) {\r\n            props.setMaxValue(parseInt(e.currentTarget.value));\r\n            props.setScreenMessage('enter values and press \\'set\\' ');\r\n            props.setIncBtnFlag(true);\r\n            props.setSetBtnFlag(false);\r\n            props.setClearBtn(false);\r\n\r\n        } else {\r\n            props.setMaxValue(parseInt(e.currentTarget.value));\r\n            props.setScreenMessage('Incorrect value!');\r\n            props.setIncBtnFlag(true);\r\n            props.setSetBtnFlag(true);\r\n            props.setResBtnFlag(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={obj.screen}>\r\n            <div className={obj.extra_container}>\r\n                <div className={obj.flex_container}>\r\n                    <p>max value:</p>\r\n                    <input value={props.maxValue}\r\n                           onChange={onChangeMaxInputHandler}\r\n                           className={obj.max_input}\r\n                           style={\r\n                               props.maxValue <= props.minValue\r\n                                   ? {\r\n                                       backgroundColor: \"plum\",\r\n                                       border: '3px solid red',\r\n                                   }\r\n                                   :\r\n                                   {}\r\n                           }\r\n                           type='number'/>\r\n                </div>\r\n                <div className={obj.flex_container}>\r\n                    <p>start value:</p>\r\n                    <input value={props.minValue}\r\n                           onChange={onChangeStartInputHandler}\r\n                           className={obj.min_input}\r\n                           style={\r\n                               props.minValue >= props.maxValue || props.minValue < 0\r\n                                   ? {\r\n                                       backgroundColor: \"plum\",\r\n                                       border: '3px solid red',\r\n                                   }\r\n                                   :\r\n                                   {}\r\n                           }\r\n                           type='number'/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SetScreen;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Screen from './components/Screen';\r\nimport Buttons from \"./components/Buttons\";\r\nimport obj from \"./components/Buttons.module.css\";\r\nimport SetScreen from \"./components/SetScreen\";\r\n\r\nfunction App() {\r\n    let localStorageMinValue = localStorage.getItem('minValue');\r\n    let localStorageMaxValue = localStorage.getItem('maxValue');\r\n    let [value, setValue] = useState<number>(localStorageMinValue ? +localStorageMinValue : 0);\r\n    let [minValue, setMinValue] = useState<number>(localStorageMinValue ? +localStorageMinValue : 0);\r\n    let [maxValue, setMaxValue] = useState<number>(localStorageMaxValue ? +localStorageMaxValue : 5);\r\n    let [screenMessage, setScreenMessage] = useState<string>('');\r\n    const [incBtnFlag, setIncBtnFlag] = useState<boolean>(false);\r\n    const [resBtnFlag, setResBtnFlag] = useState<boolean>(true);\r\n    const [setBtnFlag, setSetBtnFlag] = useState<boolean>(true);\r\n    const [clearBtn, setClearBtn] = useState<boolean>(false);\r\n\r\n    const onIncBtnClickHandler = () => {\r\n        if (value < maxValue) {\r\n            if (value === maxValue - 1) {\r\n                setIncBtnFlag(true);\r\n            }\r\n            setResBtnFlag(false);\r\n            value++;\r\n            setValue(value);\r\n        }\r\n    }\r\n    const onResBtnClickHandler = () => {\r\n        setIncBtnFlag(false);\r\n        setResBtnFlag(true);\r\n        setValue(minValue);\r\n    }\r\n\r\n    const onSetBtnClickHandler = () => {\r\n        setSetBtnFlag(true);\r\n        setIncBtnFlag(false);\r\n        setScreenMessage('');\r\n        setValue(minValue);\r\n        localStorage.setItem('minValue', minValue.toString());\r\n        localStorage.setItem('maxValue', maxValue.toString());\r\n    }\r\n    const onClearBtnClickHandler = () => {\r\n        localStorage.clear();\r\n        setClearBtn(true);\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='setter_wrapper'>\r\n                <SetScreen maxValue={maxValue}\r\n                           setMaxValue={setMaxValue}\r\n                           minValue={minValue}\r\n                           setMinValue={setMinValue}\r\n                           setIncBtnFlag={setIncBtnFlag}\r\n                           setResBtnFlag={setResBtnFlag}\r\n                           setSetBtnFlag={setSetBtnFlag}\r\n                           screenMessage={screenMessage}\r\n                           setScreenMessage={setScreenMessage}\r\n                           setClearBtn={setClearBtn}\r\n                />\r\n                <div className='buttons'>\r\n\r\n                    <Buttons onClick={onClearBtnClickHandler}\r\n                             flag={clearBtn}\r\n                             class={obj.clear}\r\n                    >\r\n                        Clear LS</Buttons>\r\n                    <Buttons flag={setBtnFlag}\r\n                             onClick={onSetBtnClickHandler}\r\n                             class={obj.set}\r\n                    >\r\n                        Set</Buttons>\r\n                </div>\r\n            </div>\r\n            <div className='counter_wrapper'>\r\n                <Screen\r\n                    maxValue={maxValue}\r\n                    screenMessage={screenMessage}\r\n                    value={value}/>\r\n                <div className='buttons'>\r\n                    <Buttons flag={incBtnFlag}\r\n                             onClick={onIncBtnClickHandler}\r\n                             class={obj.inc}\r\n                    >Inc</Buttons>\r\n                    <Buttons flag={resBtnFlag}\r\n                             onClick={onResBtnClickHandler}\r\n                             class={obj.reset}\r\n                    >Reset</Buttons>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}